{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"title": "Test Card Schema Configuration",
	"description": "The Schmea for the test card generator configuration of the canvas",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"enum": [
				"builtin.canvasoptions"
			],
			"description": "This to be labelled as \"builtin.canvasoptions\", so that the json is correctly configured"
		},
		"imageType": {
			"enum": [
				"ACES",
				"NRGBA64"
			],
			"description": "To choose a base of NRGBA64 or ACES for the image generation"
		},
		"imageType": {
			"enum": [
				"ACES",
				"NRGBA64"
			],
			"description": "To choose a base of NRGBA64 or ACES for the image generation"
		},
		"baseImage": {
			"anyOf": [
				{
					"$ref": "#/$defs/fileinput/png"
				},
				{
					"$ref": "#/$defs/fileinput/tiff"
				}
			]
		},
		"geometry": {
			"type": "string"
		},
		"name": {
			"type": "array",
			"minItems": 1,
			"items": {
				"anyOf": [
					{
						"$ref": "#/$defs/fileinput/png"
					},
					{
						"$ref": "#/$defs/fileinput/tiff"
					},
					{
						"$ref": "#/$defs/fileinput/dpx"
					},
					{
						"$ref": "#/$defs/fileinput/csv"
					},
					{
						"$ref": "#/$defs/fileinput/sth"
					},
					{
						"$ref": "#/$defs/fileinput/exr"
					}, {
						"type": "string"
					}
				]
			},
			"description": "The filename and optional location for the generated image to be saved"
		},
		"frameSize": {
			"type": "object",
			"properties": {
				"w": {
					"type": "integer",
					"minimum": 24,
					"maximum": 65535
				},
				"h": {
					"type": "integer",
					"minimum": 24,
					"maximum": 65535
				}
			},
			"additionalProperties": false,
			"required": [
				"w",
				"h"
			],
			"description": "The width and height of the zone plate in pixels"
		},
		"linewidth": {
			"type": "number",
			"minimum": 0,
			"maximum": 100,
			"description": "the width of the gridlines"
		},
		"filedepth": {
			"enum": [
				8,
				10,
				12,
				16
			],
			"description": "These are the available bit depths in which a dpx file generated by the test card generator can be saved. If left empty then the file is saved as 16 bit."
		},
		"gridRows": {
			"type": "integer",
			"minimum": 0
		},
		"gridColumns": {
			"type": "integer",
			"minimum": 0
		},
		"backgroundFillColor": {
			"$ref": "#/$defs/anycolour",
			"description": "The colour for the background of the testcard."
		},
		"lineColor": {
			"$ref": "#/$defs/anycolour",
			"description": "The colour for the lines of the testcard"
		},
		"ColorSpace" : {
			"type" : "object"
		},
		"frame analytics": {
			"type": "object",
			"properties": {
				"configuration": {
					"$ref": "#/$defs/enabled"
				},
				"average color": {
					"$ref": "#/$defs/enabled"
				},
				"phash": {
					"$ref": "#/$defs/enabled"
				}
			},
			"additionalProperties": false,
			"description": "The enabled metadata in debug mode"
		}
	},
	"required": [
		"name",
		"frameSize",
		"type",
		"gridRows",
		"gridColumns"
	],
	"additionalProperties": false,
	"$defs": {
		"enabled": {
			"description": "is metadata for this enabled as a boolean",
            "type": "object",
			"properties": {
              	"enabled": {
					"type": "boolean"
              	}
            }
		},
		"colourvals": {
			"description": "the range for which a rgb value of colour is applicable",
			"type": "integer",
			"minimum": 0,
			"maximum": 4095
		},
		"fileinput": {
			"png": {
				"type": "string",
				"pattern": "^[\\w\\W]{1,255}\\.[pP][nN][gG]$",
				"description": "## Example\n### Acceptable inputs\n- myfile.png\n\n- ./myfolder/myfile.PNG\n- 這是有效的文件名.png\n### Invalid Inputs\n- ramps.pngg"
			},
			"tiff": {
				"type": "string",
				"pattern": "^[\\w\\W]{1,255}\\.[tT][iI][fF]{1,2}$",
				"description": "## Example\n### Acceptable inputs\n- myfile.tif\n- ./myfolder/myfile.tiff\n- 這是有效的文件名.TIFF\n### Invalid Inputs\n- ramps.tifg"
			},
			"dpx": {
				"type": "string",
				"pattern": "^[\\w\\W]{1,255}\\.[dD][pP][xX]$",
				"description": "## Example\n### Acceptable inputs\n- myfile.dpx\n- ./myfolder/myfile.DPX\n- 這是有效的文件名.dpX\n### Invalid Inputs\n- ramps.dp_x"
			},
			"sth": {
				"type": "string",
				"pattern": "^[\\w\\W]{1,255}\\.[7][tT][hH]$",
				"description": "## Example\n### Acceptable inputs\n- myfile.7th\n- ./myfolder/myfile.7TH\n- 這是有效的文件名.7Th\n### Invalid Inputs\n- ramps.7p_h"
			},
			"exr": {
				"type": "string",
				"pattern": "^[\\w\\W]{1,255}\\.[e][xX][rR]$",
				"description": "## Example\n### Acceptable inputs\n- myfile.exr\n- ./myfolder/myfile.EXR\n- 這是有效的文件名.exR\n### Invalid Inputs\n- ramps.er"
			},
			"csv": {
				"type": "string",
				"pattern": "^[\\w\\W]{1,255}\\.[cC][sS][Vv]$",
				"description": "## Example\n### Acceptable inputs\n- myfile.csv\n- ./myfolder/myfile.CSV\n- 這是有效的文件名.csV\n### Invalid Inputs\n- ramps.csv.r"
			}
		},"anycolour":{"anyOf":[{"$ref": "#/$defs/colourReg/6hex"},
		{"$ref": "#/$defs/colourReg/3hex"},
		{"$ref": "#/$defs/colourReg/8hex"},
		{"$ref": "#/$defs/colourReg/4hex"},
		{"$ref": "#/$defs/colourReg/cssrgb"},
		{"$ref": "#/$defs/colourReg/cssrgba"},
		{"$ref": "#/$defs/colourReg/cssrgb12"},
		{"$ref": "#/$defs/colourReg/cssrgba12"}
		]},
		"colourReg": {
			"6hex": {
				"type": "string",
				"pattern": "^#[A-Fa-f0-9]{6}$",
				"description": "## Example\nThis is for the colour of the labels on the ramps. This follows the pattern #rrggbb in hexcode, the values can be 0-9 and a-f e.g. #c45ea3 is acceptable but #aga6ah is not."
			},
			"3hex": {
				"type": "string",
				"pattern": "^#[A-Fa-f0-9]{3}$",
				"description": "## Example\nThis is for the colour of the labels on the ramps. This follows the pattern #rgb in single hexcode, the values can be 0-9 and a-f e.g. #c53 is acceptable but #g6h is not."
			},
			"8hex": {
				"type": "string",
				"pattern": "^#[A-Fa-f0-9]{8}$",
				"description": "## Example\nThis is for the colour of the labels on the ramps. This follows the pattern #rrggbbaa in hexcode, the values can be 0-9 and a-f e.g. #c45ea3ff is acceptable but #aga6ahff is not."
			},
			"4hex": {
				"type": "string",
				"pattern": "^#[A-Fa-f0-9]{4}$",
				"description": "## Example\nThis is for the colour of the labels on the ramps. This follows the pattern #rgba in single hexcode, the values can be 0-9 and a-f e.g. #c53f is acceptable but #g6h is not."
			},
			"cssrgba": {
				"type": "string",
				"pattern": "^(rgba\\()\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\)$",
				"description": "## Example\nThis is for the colour of the labels on the ramps. This follows the pattern rgba(rval,gval,bval,aval), the values are between 0.255 e.g. rgb(240,220,4,255) is acceptable but rgb(240,-5,400,23) is not."
			},
			"cssrgb": {
				"type": "string",
				"pattern": "^(rgb\\()\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\)$",
				"description": "## Example\nThis is for the colour of the labels on the ramps. This follows the pattern rgb(rval,gval,bval), the values are between 0.255 e.g. rgb(240,220,4) is acceptable but rgb(240,-5,400) is not."
			},
			"cssrgb12": {
				"type": "string",
				"pattern":"^rgb12\\(([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5])\\)$"
			},
			"cssrgba12": {
				"type": "string",
				"pattern":"^rgba12\\(([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5])\\)$"
			}
		}
	}
}